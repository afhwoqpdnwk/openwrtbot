#!/bin/bash

ipmodem="192.168.8.1"
pass="admin"
iface="eth1"

login(){
data=$(curl -s http://$ipmodem/api/webserver/SesTokInfo -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7")
sesi=$(echo "$data" | grep "SessionID=" | cut -b 10-147)
token=$(echo "$data" | grep "TokInfo" | cut -b 10-41)
check=$(curl -s http://$ipmodem/api/user/state-login -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
state=$(echo $check|awk -F "<State>" '{print $2}'|awk -F "</State>" '{print $1}')
type=$(echo $check|awk -F "<password_type>" '{print $2}'|awk -F "</password_type>" '{print $1}')
if [ $state = "0" ]; then
  :;
else
  if [ $type = "4" ]; then
    pass1=$(echo -n "$pass"|sha256sum|head -c 64|base64 -w 0)
    pass1=$(echo -n "admin$pass1$token"|sha256sum|head -c 64|base64 -w 0)
    pass1=$(echo -n "$pass1</Password><password_type>4</password_type>")
  else
    pass1=$(echo -n "$pass"|base64 -w 0)
    pass1=$(echo -n "$pass1</Password>")
  fi
  login=$(curl -s -D- -o/dev/null -X POST http://$ipmodem/api/user/login -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><Username>admin</Username><Password>'$pass1'</request>')
  scoki=$(echo "$login"|grep [Ss]et-[Cc]ookie|cut -d':' -f2|cut -b 1-138)
  if [ ! -n "$scoki" ]; then
  echo -e "Login failed, please enter the IP address and password"
  read -r -p "enter the IP address or [Y/y] default (192.168.8.1): " ipads
      if [[ "$ipads" =~ ^([yY][eE][sS]|[yY])$ ]]; then
       echo -e "ip default: 192.168.8.1"
      elif [ ! -n "$ipads" ]; then
       echo -e "input should not be empty"
       exit 1
      else
       sed -i "6s/.*/ipmodem=\"$ipads\"/" /usr/bin/ht
       echo -e "ip address successfully changed to\e[0m \e[1;31m$ipads\e[0m"
      fi
  read -r -p "Enter the modem password or [Y/y] default admin: " pswd
      if [[ "$pswd" =~ ^([yY][eE][sS]|[yY])$ ]]; then
       echo -e "password default: admin"
      elif [ ! -n "$ipads" ]; then
       echo -e "input should not be empty"
       exit 1
      else
       sed -i "7s/.*/pass=\"$pswd\"/" /usr/bin/ht
       echo -e "password successfully changed to $pswd"
      fi
   fi
fi
}

choki(){
 data=$(curl -s http://$ipmodem/api/webserver/SesTokInfo -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $scoki")
 sesi=$(echo "$data" | grep "SessionID=" | cut -b 10-147)
 token=$(echo "$data" | grep "TokInfo" | cut -b 10-41)
}

function reboot() {
 login
 choki
 res=$(curl -s -X POST http://$ipmodem/api/device/control -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><Control>1</Control></request>')
 ress=$(echo $res|awk -F "<response>" '{print $2}'|awk -F "</response>" '{print $1}')
 if [ "$ress" = "OK" ]; then
   echo -e "rebooting..."
 else
   echo -e "failed rebooting"
 fi
}
# function for get sms
function format() {
    if [ ! -n "$countsms" ]; then
        echo -e "sms modem is empty"
    else
        if [ "$1" = "1" ]; then 
            echo -e "                  Read $countsms SMS"

        else
            echo -e "                  Found $countsms SMS"
        fi
        while read -r message; do
            smstat=$(echo "$message" | awk -F '<Smstat>' '{print $2}' | awk -F '</Smstat>' '{print $1}')
            index=$(echo "$message" | awk -F '<Index>' '{print $2}' | awk -F '</Index>' '{print $1}')
            phone=$(echo "$message" | awk -F '<Phone>' '{print $2}' | awk -F '</Phone>' '{print $1}')
            content=$(echo "$message" | awk -F '<Content>' '{print $2}' | awk -F '</Content>' '{print $1}' | sed 's/&#40;/(/g' | sed 's/&#41;/)/g' | sed 's/&lt;/</g' | sed 's/&gt;/>/g' | sed 's/&amp;/\&/g' | sed 's|&#x2F;|/|g')
            date=$(echo "$message" | awk -F '<Date>' '{print $2}' | awk -F '</Date>' '{print $1}')
            
            if [ -n "$smstat" ]; then
                if [ "$smstat" = "0" ]; then
                    status="unread"
                else
                    status="read"
                fi
                echo "━━━━━━━━━━━━━━━━━━━━━━━"
            fi
            if [ -n "$index" ]; then
                echo "Id : <code>$index</code>"
            fi
            if [ -n "$phone" ]; then
                echo "From : $phone"
            fi
            if [ -n "$content" ]; then
                echo "Msg : $content"
            fi
            if [ -n "$date" ]; then
                echo "Date : $date"
            fi
        done <<< "$messages"
    fi
}

function getSMS(){
login
choki
 if [ -n "${1}" ]; then
  if (( $1 < 51 )); then
   cn=$1
 get=$(curl -s -X POST http://$ipmodem/api/sms/sms-list -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><PageIndex>1</PageIndex><ReadCount>'"$cn"'</ReadCount><BoxType>1</BoxType><SortType>0</SortType><Ascending>0</Ascending><UnreadPreferred>true</UnreadPreferred></request>')
 messages=$(echo "$get" | awk -F '</Message>' '{ for(i=1; i<=NF; i++) print $i "</Message>"}')
 countsms=$(echo $get|awk -F "<Count>" '{print $2}'|awk -F "</Count>" '{print $1}')
 echo "━━━━━━━━━━━━━━━━━━━━━━━"
 format 1
 echo "━━━━━━━━━━━━━━━━━━━━━━━"
  else
   echo -e "input can't be more entries should not be more than 50"
  fi
 else
 cnn=$(curl -s -X GET http://$ipmodem/api/sms/sms-count -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 cn1=$(echo $cnn|awk -F "<LocalInbox>" '{print $2}'|awk -F "</LocalInbox>" '{print $1}')
 if (( $cn1 < 51 )); then
  cn=$(echo $cn1)
 else
  cn="50"
 fi
 get=$(curl -s -X POST http://$ipmodem/api/sms/sms-list -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><PageIndex>1</PageIndex><ReadCount>'"$cn"'</ReadCount><BoxType>1</BoxType><SortType>0</SortType><Ascending>0</Ascending><UnreadPreferred>true</UnreadPreferred></request>')
 messages=$(echo "$get" | awk -F '</Message>' '{ for(i=1; i<=NF; i++) print $i "</Message>"}')
 countsms=$(echo $get|awk -F "<Count>" '{print $2}'|awk -F "</Count>" '{print $1}')
 echo "━━━━━━━━━━━━━━━━━━━━━━━"
 format 2
 echo "━━━━━━━━━━━━━━━━━━━━━━━"
fi
}

function sendSMS(){
login
 to="${1}"
    if [[ ! "$to" =~ ^\+?[0-9]+$ ]]; then
        echo -e "Please provide the receiver number (08xxxx or +628xxx)"
        exit 1
    fi
    message="${@:2}"
    if [ -z "$message" ]; then
        echo -e "Please provide the message"
        exit 1
    fi
 choki
 dates=$(date +"%Y-%m-%d %H:%M:%S")
 lengh=$(echo -n "$message" | wc -c)
 send=$(curl -s -X POST http://$ipmodem/api/sms/send-sms -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><Index>-1</Index><Phones><Phone>'"$to"'</Phone></Phones><Sca></Sca><Content>'"$message"'</Content><Length>'"$lengh"'</Length><Reserved>1</Reserved><Date>$dates</Date></request>')
 sendd=$(echo $send|awk -F "<response>" '{print $2}'|awk -F "</response>" '{print $1}')
 #echo $sendd
 if [ "$sendd" = "OK" ]; then
     echo -e "success Send SMS to $to message $message"
  else
     echo -e "failed send SMS"
 fi
}

function deletedSMS(){
  login
  choki
  if [ -n "${1}" ]; then
    del=$(curl -s -X POST http://$ipmodem/api/sms/delete-sms -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><Index>'"$1"'</Index></request>')
    dell=$(echo $del | awk -F "<response>" '{print $2}' | awk -F "</response>" '{print $1}')
    if [ "$dell" = "OK" ]; then
      echo -e "success delete id $1"
    else
      echo -e "failed, id not found"
    fi
  else
    #echo -e "id require"
    aggre="y"
    if [[ "$aggre" =~ ^([yY][eE][sS]|[yY])$ ]]; then
      get=$(curl -s -X POST http://$ipmodem/api/sms/sms-list -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><PageIndex>1</PageIndex><ReadCount>50</ReadCount><BoxType>1</BoxType><SortType>0</SortType><Ascending>0</Ascending><UnreadPreferred>true</UnreadPreferred></request>')
      messages=$(echo "$get" | awk -F '</Message>' '{ for(i=1; i<=NF; i++) print $i "</Message>"}')
      login
      deleted_any=false
      while read -r message; do
        index=$(echo "$message" | awk -F '<Index>' '{print $2}' | awk -F '</Index>' '{print $1}')
        if [ -n "$index" ]; then
          #echo " $index"
          choki
          dellal=$(curl -s -X POST http://$ipmodem/api/sms/delete-sms -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><Index>'"$index"'</Index></request>')
          dells=$(echo $dellal | awk -F "<response>" '{print $2}' | awk -F "</response>" '{print $1}')
          if [ "$dells" = "OK" ]; then
            deleted_any=true
          else
            echo -e "failed to delete sms with id $index"
          fi
        fi
      done <<< "$messages"
      if [ "$deleted_any" = true ]; then
        echo -e "successfully deleted sms"
      else
        echo -e "sms not found, and failed to delete sms"
      fi
    else
      echo -e "input invalid, cancel"
      exit 1
    fi
  fi
}


function countSMS(){
login
choki
 count=$(curl -s -X GET http://$ipmodem/api/sms/sms-count -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 unread=$(echo $count|awk -F "<LocalUnread>" '{print $2}'|awk -F "</LocalUnread>" '{print $1}')
 inbox=$(echo $count|awk -F "<LocalInbox>" '{print $2}'|awk -F "</LocalInbox>" '{print $1}')
 outbox=$(echo $count|awk -F "<LocalOutbox>" '{print $2}'|awk -F "</LocalOutbox>" '{print $1}')
 draf=$(echo $count|awk -F "<LocalDraft>" '{print $2}'|awk -F "</LocalDraft>" '{print $1}')
 deleted=$(echo $count|awk -F "<LocalDeleted>" '{print $2}'|awk -F "</LocalDeleted>" '{print $1}')
 echo "╭───────────╮"
 echo -e "├ inbox $inbox sms"
 echo -e "├ outbox $outbox sms"
 echo -e "├ draf $draf sms"
 echo "╰───────────╯"
}

function readSMS(){
login
choki
 if [ -n "${1}" ]; then
 read=$(curl -s -X POST http://$ipmodem/api/sms/set-read -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><Index>'"$1"'</Index></request>')
 readd=$(echo $read|awk -F "<response>" '{print $2}'|awk -F "</response>" '{print $1}')
    if [ "$readd" = "OK" ]; then
      echo -e "successfully changed the unread status to read with id $1"
    else
      echo -e "failed, id not found"
    fi
 else
 echo -e "id requirem"
 fi
}

function dataSET(){
login
choki
 if [ -n "${1}" ]; then
 set=$(curl -s -X POST http://$ipmodem/api/dialup/mobile-dataswitch -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi" -d '<?xml version="1.0" encoding="UTF-8"?><request><dataswitch>'"$1"'</dataswitch></request>')
 sett=$(echo $set|awk -F "<response>" '{print $2}'|awk -F "</response>" '{print $1}')
   if [ "$sett" = "OK" ]; then
      echo -e "successm"
      dataSTATUS
   else
      echo -e "failed, select 1 and 0"
   fi
 else
 echo -e "choose 0/1"
 fi
}

function dataSTATUS(){
login
choki
 datas=$(curl -s -X GET http://$ipmodem/api/dialup/mobile-dataswitch -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 #echo $datas
 datass=$(echo $datas|awk -F "<dataswitch>" '{print $2}'|awk -F "</dataswitch>" '{print $1}')
 #echo $datass
   if [ "$datass" == 1 ]; then
      echo -e "DATA ON"
    else
     echo -e "DATA OFF"
    fi
}

# info modem
human_print(){
while read B dummy; do
  [ $B -lt 1024 ] && echo ${B} B && break
  KB=$(((B+512)/1024))
  [ $KB -lt 1024 ] && echo ${KB} KB && break
  MB=$(((KB+512)/1024))
  [ $MB -lt 1024 ] && echo ${MB} MB && break
  GB=$(((MB+512)/1024))
  [ $GB -lt 1024 ] && echo ${GB} GB && break
  echo $(((GB+512)/1024)) TB
done
}

speed_print(){
while read B dummy; do
  # Mengkonversi dari byte ke bit
  B=$((B * 8))
  
  [ $B -lt 1024 ] && echo ${B} bps && break
  Kbps=$(((B+512)/1024))
  [ $Kbps -lt 1024 ] && echo ${Kbps} Kbps && break
  Mbps=$(((Kbps+512)/1024))
  [ $Mbps -lt 1024 ] && echo ${Mbps} Mbps && break
done
}

total_time() {
  while read seconds dummy; do
    output=""

    if [ $seconds -ge 31536000 ]; then
      years=$((seconds / 31536000))
      seconds=$((seconds % 31536000))
      output+="${years}y-"
    fi

    if [ $seconds -ge 2592000 ]; then
      months=$((seconds / 2592000))
      seconds=$((seconds % 2592000))
      output+="${months}m-"
    fi

    if [ $seconds -ge 86400 ]; then
      days=$((seconds / 86400))
      seconds=$((seconds % 86400))
      output+="${days}d "
    fi

    if [ $seconds -ge 3600 ]; then
      hours=$((seconds / 3600))
      seconds=$((seconds % 3600))
      output+="${hours}h:"
    fi

    if [ $seconds -ge 60 ]; then
      minutes=$((seconds / 60))
      seconds=$((seconds % 60))
      output+="${minutes}m:"
    fi

    if [ $seconds -ge 0 ]; then
      output+="${seconds}s"
    fi

    # Menghapus karakter ":" di akhir jika ada
    output=${output%:}

    echo "$output"
  done
}

# Cara penggunaan:
# echo "63072001" | human_time


bands() {
case $1 in
    "1")
    echo -e '2100 MHz'
    ;;
    "3")
    echo -e '1800 MHz'
    ;;
    "8")
    echo -e '900 MHz'
    ;;
    "40")
    echo -e '2300 MHz'
    ;;
    esac
}
network() {
case $1 in
  "0")
  echo -e 'No service'
  ;;
  "1")
  echo -e 'GSM (2G)'
  ;;
  "2")
  echo -e 'GPRS (2G)'
  ;;
  "3")
  echo -e 'EDGE (2G)'
  ;;
  "21")
  echo -e 'IS95A'
  ;;
  "22")
  echo -e 'IS95B'
  ;;
  "23")
  echo -e 'CDMA 1X'
  ;;
  "24")
  echo -e 'EVDO rev.0'
  ;;
  "25")
  echo -e 'EVDO rev.A'
  ;;
  "26")
  echo -e 'EVDO rev.B'
  ;;
  "27")
  echo -e 'HYBRID CDMA 1X'
  ;;
  "28")
  echo -e 'HYBRID EVDO rev.0'
  ;;
  "29")
  echo -e 'HYBRID EVDO rev.A'
  ;;
  "30")
  echo -e 'HYBRID EVDO rev.B'
  ;;
  "31")
  echo -e 'eHRPD rel.0'
  ;;
  "32")
  echo -e 'eHRPD rel.A'
  ;;
  "33")
  echo -e 'eHRPD rel.B'
  ;;
  "34")
  echo -e 'HYBRID eHRPD rel.0'
  ;;
  "35")
  echo -e 'HYBRID eHRPD rel.A'
  ;;
  "36")
  echo -e 'HYBRID eHRPD rel.B'
  ;;
  "41")
  echo -e 'UMTS (3G)'
  ;;
  "42")
  echo -e 'HSDPA (3G)'
  ;;
  "43")
  echo -e 'HSUPA (3G)'
  ;;
  "44")
  echo -e 'HSPA (3G)'
  ;;
  "45")
  echo -e 'HSPA+ (3.5G)'
  ;;
  "46")
  echo -e 'DC-HSPA+ (3.5G)'
  ;;
  "61")
  echo -e 'TD-SCDMA (3G)'
  ;;
  "62")
  echo -e 'TD-HSDPA (3G)'
  ;;
  "63")
  echo -e 'TD-HSUPA (3G)'
  ;;
  "64")
  echo -e 'TD-HSPA (3G)'
  ;;
  "65")
  echo -e 'TD-HSPA+ (3.5G)'
  ;;
  "81")
  echo -e '802.16E'
  ;;
  "101")
  echo -e 'LTE (4G)'
  ;;
  "1011")
  echo -e 'LTE CA (4G+)'
  ;;
  "111")
  echo -e 'NR (5G)'
  ;;
esac
}

function info(){
 login
 choki
 did=$(curl -s http://$ipmodem/dev_info.data -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 uptime=$(echo $did|awk -F "<uptime>" '{print $2}'|awk -F "</uptime>" '{print $1}'|total_time)
 time=$(echo $did|awk -F "<device_time>" '{print $2}'|awk -F "</device_time>" '{print $1}')
 chiptemp=$(echo "$did" | awk -F'[<>]' '/<chiptemp>/{printf "%.1f°C\n", $3/10}')
 operator=$(echo $did|awk -F "<SIM_name>" '{print $2}'|awk -F "</SIM_name>" '{print $1}')
 ip=$(curl -s http://$ipmodem/api/device/information -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 ipp=$(echo $ip|awk -F "<WanIPAddress>" '{print $2}'|awk -F "</WanIPAddress>" '{print $1}')
 tp=$(echo $did|awk -F "<DeviceName>" '{print $2}'|awk -F "</DeviceName>" '{print $1}')
 dns=$(curl -s http://$ipmodem/api/monitoring/status -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 dns1=$(echo $dns|awk -F "<PrimaryDns>" '{print $2}'|awk -F "</PrimaryDns>" '{print $1}')
 dns2=$(echo $dns|awk -F "<SecondaryDns>" '{print $2}'|awk -F "</SecondaryDns>" '{print $1}')
 net=$(echo $dns|awk -F "<CurrentNetworkTypeEx>" '{print $2}'|awk -F "</CurrentNetworkTypeEx>" '{print $1}')
 td=$(curl -s http://$ipmodem/api/monitoring/traffic-statistics -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 curcon=$(echo $td|awk -F "<CurrentConnectTime>" '{print $2}'|awk -F "</CurrentConnectTime>" '{print $1}'|total_time)
 totcon=$(echo $td|awk -F "<TotalConnectTime>" '{print $2}'|awk -F "</TotalConnectTime>" '{print $1}'|total_time)
 sup=$(echo $td|awk -F "<CurrentUploadRate>" '{print $2}'|awk -F "</CurrentUploadRate>" '{print $1}'|speed_print)
 sdd=$(echo $td|awk -F "<CurrentDownloadRate>" '{print $2}'|awk -F "</CurrentDownloadRate>" '{print $1}'|speed_print)
 cup=$(echo $td|awk -F "<CurrentUpload>" '{print $2}'|awk -F "</CurrentUpload>" '{print $1}'|human_print)
 cdd=$(echo $td|awk -F "<CurrentDownload>" '{print $2}'|awk -F "</CurrentDownload>" '{print $1}'|human_print)
 tup=$(echo $td|awk -F "<TotalUpload>" '{print $2}'|awk -F "</TotalUpload>" '{print $1}'|human_print)
 tdd=$(echo $td|awk -F "<TotalDownload>" '{print $2}'|awk -F "</TotalDownload>" '{print $1}'|human_print)
 par=$(curl -s http://$ipmodem/add_param.data -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 dlfreq=$(echo $par|awk -F "<freq1>" '{print $2}'|awk -F "</freq1>" '{print $1}')
 upfreq=$(echo $par|awk -F "<freq2>" '{print $2}'|awk -F "</freq2>" '{print $1}')
 dvi=$(curl -s http://$ipmodem/api/device/signal -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 pci=$(echo $dvi|awk -F "<pci>" '{print $2}'|awk -F "</pci>" '{print $1}')
 cellid=$(echo $dvi|awk -F "<cell_id>" '{print $2}'|awk -F "</cell_id>" '{print $1}')
 rsrp=$(echo $dvi|awk -F "<rsrp>" '{print $2}'|awk -F "</rsrp>" '{print $1}')
 rssi=$(echo $dvi | awk -F "<rssi>" '{print $2}' | awk -F "</rssi>" '{print $1}' | sed 's/&gt;=//g')
 rsrq=$(echo $dvi|awk -F "<rsrq>" '{print $2}'|awk -F "</rsrq>" '{print $1}')
 sinr=$(echo $dvi|awk -F "<sinr>" '{print $2}'|awk -F "</sinr>" '{print $1}')
 earfcn=$(echo $par|awk -F "<earfcn1>" '{print $2}'|awk -F "</earfcn1>" '{print $1}')
 band=$(echo $par|awk -F "<band>" '{print $2}'|awk -F "</band>" '{print $1}')
 bandwidth=$(echo $dvi|awk -F "<lte_bandwidth>" '{print $2}'|awk -F "</lte_bandwidth>" '{print $1}')
 cvg=$(curl -s http://$ipmodem/user_config.data -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "X-Requested-With: XMLHttpRequest" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 wcthost=$(echo $cvg|awk -F "<pinghosts>" '{print $2}'|awk -F "</pinghosts>" '{print $1}')
 wctstat=$(echo $cvg|awk -F "<watchmode>" '{print $2}'|awk -F "</watchmode>" '{print $1}')
 if [ "$wctstat" == 1 ]; then
    wctstats=$(echo -e "ON" "|" $wcthost)
 else
    wctstats=$(echo -e "OFF" "|" $wcthost)
 fi
 RX=$(ifconfig $iface | awk -F[\(\)] '/bytes/ {printf "%s",$2}')
 TX=$(ifconfig $iface | awk -F[\(\)] '/bytes/ {printf "%s",$4}')

}

function informasi(){
 info
 echo "╭───────────────────────────╮"
 echo "├<code>Operator      :</code> $operator"
 echo "├<code>Device        :</code> $tp"
 echo "├<code>Dev Time      :</code> $time"
 echo "├<code>Uptime        :</code> $uptime"
 echo "├<code>Temp          :</code> $chiptemp"
 echo "├<code>Wan Ip        :</code> $ipp"
 echo "├<code>Wan Time      :</code> $curcon"
 echo "├<code>Total Time    :</code> $totcon"
 echo "├<code>DNS 1         :</code> $dns1"
 echo "├<code>DNS 2         :</code> $dns2"
 echo "├<code>$(echo -ne "Network       :</code> ";network $net)"
 echo "├<code>Speed DL      :</code> $sdd"
 echo "├<code>Speed UP      :</code> $sup"
 echo "├<code>Current DL/UP :</code> $cdd / $cup"  
 echo "├<code>Total DL/UP   :</code> $tdd / $tup"  
 echo "├<code>Iface DL/UP   :</code> $RX / $TX"
 echo "├<code>$(echo -ne "Band          :</code> ";bands $band;) $(echo -ne "("B$band")")"
 echo "├<code>Bandwidth     :</code> $bandwidth"
 echo "├<code>PCI           :</code> $pci"
 echo "├<code>Cell ID       :</code> $cellid"
 echo "├<code>DL Freq       :</code> $dlfreq MHz"
 echo "├<code>UP Freq       :</code> $upfreq MHz"
 echo "├<code>EARFCN        :</code> $earfcn" 
 echo "├<code>Rsrp          :</code> $rsrp"
 echo "├<code>Rssi          :</code> $rssi"
 echo "├<code>Rsrq          :</code> $rsrq"
 echo "├<code>Sinr          :</code> $sinr"
 echo "├<code>WatchCat      :</code> $wctstats"
 echo "╰───────────────────────────╯"
}

function usage(){
info
echo "╔════════❖══════════❖════════╗"
echo -e "|   Huawei Tools Script v2    |"
echo "|  Created by Rick Qsyaerick  |"
echo "╚════════❖═════|════❖════════╝"
echo "╔════════❖═════|════❖════════╗"
echo -e "➥ 𝙾𝚙𝚎𝚛𝚊𝚝𝚘𝚛 : $operator"
echo -e "➥ 𝙳𝚎𝚟𝚒𝚌𝚎 : $tp"
echo -e "➥ 𝚆𝚊𝚗 𝙸𝙿 : $ipp"
echo "╚════════❖═════|════❖════════╝"
echo "---------------------------------------------------------------"
echo "|                           < USAGE >                         |"
echo "---------------------------------------------------------------"
echo -e "| -r get all sms or get sms with count => ht -r [1-50]        |"
echo -e "| -s send sms with the format => ht -s [number] [message]     |"
echo -e "| -d deleted all or deleted sms with id => [ht -d [id]        |"
echo "| -c view the conten of sms inbox, outbox, unread etc         |"
echo -e "| -b set status read sms with id => ht -b [id]                |"
echo -e "| -m change mobile data => ht -m [0/1] 0 = OFF 1 = ON         |"
echo "| -ms view the mobile data status                             |"
echo "| -o reboot the modem                                         |"
echo "| -i network information & modem information                  |"
echo "| -a renew wan ip address                                     |"
echo "---------------------------------------------------------------"
}

function restart(){
start_time=$(date +%s)
 choki
 info
 echo -e "before WAN IP: $ipp"
 echo -e "please wait ..."
 res=$(curl -s -X GET http://$ipmodem/api/net/plmn-list -H "Host: $ipmodem" -H "Connection: keep-alive" -H "Accept: */*" -H "Origin: http://$ipmodem" -H "X-Requested-With: XMLHttpRequest" -H "__RequestVerificationToken: $token" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" -H "Referer: http://$ipmodem/html/home.html" -H "Accept-Encoding: gzib, deflate" -H "Accept-Language: id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7" -H "Cookie: $sesi")
 #echo $res
 if [ -n "$res" ]; then
 sleep 5
 info
 end_time=$(date +%s)
 duration=$((end_time - start_time))
 echo -e "after WAN IP: $ipp"
 echo -e "completed in time $duration s"
 fi
}

function update(){
  bckip=$(sed -n '6p' /usr/bin/ht)
  bckpw=$(sed -n '7p' /usr/bin/ht)
  echo "backup ip address & password"
  wget -q -O /usr/bin/ht-update https://raw.githubusercontent.com/ahmadqsyaa/hw-tools-script/main/ht
  if [ $? -ne 0 ]; then
    echo -e "\e[1;31mUpdate/reinstall failed please try again and make sure your internet is good\e[0m"
    exit 1
  else
  chmod +x /usr/bin/ht-update
  sed -i "6s/.*/$bckip/" /usr/bin/ht-update
  sed -i "7s/.*/$bckpw/" /usr/bin/ht-update
  echo -e "\e[1;36msuccessfully update/reinstall\e[0m"
  sleep 1
  rm -rf /usr/bin/ht
  mv /usr/bin/ht-update /usr/bin/ht
  fi
}
# end info modem

case "${1}" in
    -r)
        shift
        getSMS "${@}"
        ;;
    -s)
        shift
        sendSMS "${@}"
        ;;
    -d)
        shift
        deletedSMS "${@}"
        ;;
    -c)
        countSMS
        ;;
    -b)
        shift
        readSMS "${@}"
        ;;
    -m)
        shift
        dataSET "${@}"
        ;;
    -ms)
        dataSTATUS
        ;;
    -o)
        reboot
        ;;
    -i)
        informasi
        ;;
    -a)
        restart
        ;;
    *)
      usage
      ;;
esac
